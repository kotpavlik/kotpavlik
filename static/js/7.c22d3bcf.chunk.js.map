{"version":3,"sources":["hoc/withAuthRedirectComponent.js","components/TestMessenger/Dialog/ButtonsDialogs/ButtonsDialogs.module.css","components/TestMessenger/Dialog/Dialog.module.css","components/TestMessenger/FriendsDialog/FriendDialog.module.css","components/TestMessenger/TestMessenger.module.css","components/TestMessenger/Dialog/ButtonsDialogs/ButtonsDialogs.jsx","components/TestMessenger/Dialog/ButtonsDialogs/ButtonsDialogsContainer.jsx","components/TestMessenger/Dialog/Dialog.jsx","components/TestMessenger/FriendsDialog/FriendDialog.jsx","components/TestMessenger/TestMessenger.jsx","components/TestMessenger/TestMessengerContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","Auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ButtonsDialogs","NewMessageText","className","s","textContiner","text","onChange","e","target","value","MessageChange","placeholder","buttContiner","butt","onClick","addMessange","ButtonsDialogsContainer","TestMessengerPage","dispatch","addMessageAction","onMessageAction","Dialog","dialog","dialogs","message","FriendDialog","continerFriend","friend","userName","TestMessenger","NewMessageArray","MessangesArray","map","mess","key","id","NewFriendsArray","FriendsArray","name","testMess","header","footer","compose"],"mappings":"6MAIIA,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAOD,EAAME,KAAKD,SAKbE,EAAmB,SAACC,GAAc,IACrCC,EADqC,4JAEvC,WACI,OAAKC,KAAKC,MAAMN,OACT,kBAACG,EAAcE,KAAKC,OADI,kBAAC,IAAD,CAAUC,GAAG,eAHT,GACXC,IAAML,WAUtC,OAHgCM,YAAQX,EAARW,CAAoCL,K,oBClBxEM,EAAOC,QAAU,CAAC,eAAiB,uCAAuC,aAAe,qCAAqC,KAAO,6BAA6B,aAAe,qCAAqC,KAAO,+B,oBCA7ND,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,0B,oBCA5DD,EAAOC,QAAU,CAAC,eAAiB,qCAAqC,OAAS,6BAA6B,WAAa,mC,oBCA3HD,EAAOC,QAAU,CAAC,SAAW,gCAAgC,OAAS,8BAA8B,OAAS,8BAA8B,KAAO,4BAA4B,OAAS,gC,+GC6BxKC,EA3BQ,SAACN,GAIxB,IAAIO,EAAiBP,EAAMO,eAWzB,OACE,yBAAKC,UAAWC,IAAEH,gBAChB,yBAAKE,UAAWC,IAAEC,cACd,8BAAUF,UAAWC,IAAEE,KAAMC,SARjB,SAACC,GACpB,IAAIF,EAAOE,EAAEC,OAAOC,MACpBf,EAAMgB,cAAcL,IAM2CI,MAASR,EAAgBU,YAAY,8CAEjG,yBAAKT,UAAWC,IAAES,cACd,4BAAQV,UAAWC,IAAEU,KAAMC,QAflB,WACnBpB,EAAMqB,gBAcI,WCIKC,EAFiBnB,aApBV,SAACV,GAErB,MAAO,CACLc,eAAed,EAAM8B,kBAAkBhB,mBAGlB,SAACiB,GACxB,MAAO,CAEHH,YAAa,WACXG,EAASC,gBAIXT,cAAe,SAACL,GACda,EAASE,YAAgBf,QAKDR,CAA6CG,G,kBCd9DqB,EATA,SAAC3B,GAEhB,OACA,yBAAKQ,UAAWC,IAAEmB,QACd,yBAAKpB,UAAWC,IAAEoB,SAAlB,IAA6B7B,EAAM8B,W,kBCIxBC,EARM,SAAC/B,GACtB,OACI,yBAAKQ,UAAWC,IAAEuB,gBACtB,yBAAKxB,UAAWC,IAAEwB,QAASjC,EAAMkC,Y,kBCmBlBC,EAlBO,SAACnC,GAErB,IAAIoC,EAAkBpC,EAAMuB,kBAAkBc,eAAeC,KAAI,SAACC,GAAD,OAC/D,kBAAC,EAAD,CAAQT,QAASS,EAAKT,QAASU,IAAKD,EAAKE,QAEvCC,EAAkB1C,EAAMuB,kBAAkBoB,aAAaL,KAAI,SAACM,GAAD,OAC7D,kBAAC,EAAD,CAAcV,SAAUU,EAAKV,SAAUM,IAAKI,EAAKH,QAEnD,OACE,yBAAKjC,UAAWC,IAAEoC,UAChB,yBAAKrC,UAAWC,IAAEqC,QAAlB,8CACA,yBAAKtC,UAAWC,IAAEwB,QAASS,GAC3B,yBAAKlC,UAAWC,IAAE8B,MAAOH,GACzB,yBAAK5B,UAAWC,IAAEsC,QAAQ,kBAAC,EAAD,SCFjBC,4BAAS7C,aAXH,SAACV,GAEpB,MAAO,CACL8B,kBAAkB9B,EAAM8B,sBAQqB3B,IAAlCoD,CAAoDb","file":"static/js/7.c22d3bcf.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nlet mapStateToPropsForRedirect = (state) => {  // берум state у store \n    return {\n        isAuth:state.Auth.isAuth  // именно то что нам надо для создания этого HOC\n    }\n};\n\n\nexport const withAuthRedirect = (Component) => {  // Это HOC и он в себя принимает компоненту \n    class RedirectComponent extends React.Component {  // классовая компонента, можно использовать функциональную\n        render () {\n            if (!this.props.isAuth) return <Navigate to=\"/login\"/>; // логика перероутинга если ты не афторизован \n            return <Component {...this.props}/> // ретурниться компонента которая пришла в ХОК и в нее засовываются пропсы \n        }\n    }\n\n    let ConectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent); // Оборачиваем ещё одним ХОКом для того\n    // что бы прокинуть нужные пропсы в наш ХОК-withAuthRedirect что бы он в свою очередь прокинул их в контейнерную компоненту \n\n    return ConectedRedirectComponent; // ретурним последнюю обертку \n}\n\n// HOC(Hight Order Component) - это компонента который принимает в себя другую компаненту, создавая \n// для нее обёртку(контейнерную компоненту), добавляет логику или знания и возвращает(ретурнит) нужную компоненту ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonsDialogs\":\"ButtonsDialogs_ButtonsDialogs__1OkqV\",\"textContiner\":\"ButtonsDialogs_textContiner__-_Kia\",\"text\":\"ButtonsDialogs_text__3v1A3\",\"buttContiner\":\"ButtonsDialogs_buttContiner__3IDPY\",\"butt\":\"ButtonsDialogs_butt__14Sq2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__2OU5p\",\"dialogs\":\"Dialog_dialogs__3ZbC6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"continerFriend\":\"FriendDialog_continerFriend__2bJU9\",\"friend\":\"FriendDialog_friend__1AsPX\",\"activeLink\":\"FriendDialog_activeLink__alIQ-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testMess\":\"TestMessenger_testMess__m3LCQ\",\"header\":\"TestMessenger_header__3JrVA\",\"footer\":\"TestMessenger_footer__3MDT0\",\"mess\":\"TestMessenger_mess__2H-11\",\"friend\":\"TestMessenger_friend__20X6F\"};","import React from \"react\";\nimport s from \"./ButtonsDialogs.module.css\";\n\nconst ButtonsDialogs = (props) => {\n\n\n\nlet NewMessageText = props.NewMessageText;\n\nlet OnAddMessange =()=> { \nprops.addMessange();\n};\n\nlet onMessageChange = (e) => {       // (e) означает - этот <textarea/> Свойство target интерфейса Event является ссылкой на объект, который был инициатором события. Он отличается от Event.currentTarget, если обработчик события вызывается во время всплытия (bubbling) или захвата события.\n   let text = e.target.value;\n   props.MessageChange(text);\n};\n\n  return (\n    <div className={s.ButtonsDialogs}>\n      <div className={s.textContiner}>\n          <textarea className={s.text} onChange={onMessageChange} value = {NewMessageText} placeholder='напиши ...'></textarea>\n      </div>\n      <div className={s.buttContiner}>\n          <button className={s.butt} onClick={OnAddMessange}>send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ButtonsDialogs;\n","import { connect } from \"react-redux\";\nimport {addMessageAction,onMessageAction} from \"../../../../redux/TestMessenger-Reducer\";\nimport ButtonsDialogs from \"./ButtonsDialogs\";\n\n\n\nlet mapStateToProps = (state) => {\n  \n  return {\n    NewMessageText:state.TestMessengerPage.NewMessageText\n  }\n};\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    \n      addMessange: () => {\n        dispatch(addMessageAction());\n      }\n    ,\n    \n      MessageChange: (text) => {\n        dispatch(onMessageAction(text));\n      }\n  }\n}\n\nconst ButtonsDialogsContainer = connect(mapStateToProps, mapDispatchToProps)(ButtonsDialogs);\n\nexport default ButtonsDialogsContainer;\n","import React from 'react';\nimport s from './Dialog.module.css';\n\nconst Dialog = (props) => {\n\nreturn (\n<div className={s.dialog}>\n    <div className={s.dialogs}> {props.message}</div>\n</div>\n);\n}\n\nexport default Dialog ;","import React from 'react';\nimport s from './FriendDialog.module.css'\n\nconst FriendDialog = (props) => {\nreturn (\n    <div className={s.continerFriend}>\n<div className={s.friend}>{props.userName}</div>\n</div>\n);\n}\n\nexport default FriendDialog ;","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport ButtonsDialogsContainer from \"./Dialog/ButtonsDialogs/ButtonsDialogsContainer\";\nimport Dialog from \"./Dialog/Dialog\";\nimport FriendDialog from \"./FriendsDialog/FriendDialog\";\nimport s from \"./TestMessenger.module.css\";\n\nconst TestMessenger = (props) => {\n  \n  let NewMessageArray = props.TestMessengerPage.MessangesArray.map((mess) => (\n    <Dialog message={mess.message} key={mess.id} />\n  ));\n  let NewFriendsArray = props.TestMessengerPage.FriendsArray.map((name) => (\n    <FriendDialog userName={name.userName} key={name.id} />\n  ));\n  return (\n    <div className={s.testMess}>\n      <div className={s.header}>Диалоги</div>\n      <div className={s.friend}>{NewFriendsArray}</div>\n      <div className={s.mess}>{NewMessageArray}</div>\n      <div className={s.footer}><ButtonsDialogsContainer/></div>\n    </div>\n  );\n};\n\nexport default TestMessenger;\n","import { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirectComponent\";\nimport TestMessenger from \"./TestMessenger\";\n\n\n\nlet mapStateToProps =(state)=>{  // здесь в свойствах к нам приходит state\n  \n  return {\n    TestMessengerPage:state.TestMessengerPage ,// из state берём нужную нам часть которую нужно прокинуть в UI и даём ей название \n  }\n};\n\n// это HOC-создает контейнерную компоненту и принимает \n//контейнерную компоненту, добавляет логику и вохвращает компаненту. Избавляет нас от дублирования кода \n// через compose можнго сделать вложеность HOC друг в друга (UsersComponent > withAuthRedirect > connect)    \n\nexport default compose (connect(mapStateToProps),withAuthRedirect)(TestMessenger);\n"],"sourceRoot":""}