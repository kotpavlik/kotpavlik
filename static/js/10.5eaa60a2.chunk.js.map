{"version":3,"sources":["components/Login/Login.module.css","components/Login/Login.jsx"],"names":["module","exports","connect","state","isAuth","Auth","CaptchaUrl","login","props","validationsSchema","yup","shape","email","typeError","required","password","confirmPassword","oneOf","captcha","to","className","s","loginWraper","formStyles","initialValues","rememberMe","validateOnBlur","onSubmit","values","setSubmitting","setStatus","validationSchema","errors","touched","isValid","dirty","status","form","htmlFor","inputLogForm","type","name","placeholder","error","check","checkLabel","errorAPItext","src","buttonLog","disabled"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,YAAc,2BAA2B,WAAa,0BAA0B,aAAe,4BAA4B,UAAY,yBAAyB,MAAQ,qBAAqB,WAAa,0BAA0B,WAAa,0BAA0B,aAAe,8B,iCCD5S,sFAyJeC,uBARS,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,OACnBE,WAAWH,EAAME,KAAKC,cAKc,CAAEC,WAA3BL,EAjJD,SAACM,GAEb,IAAMC,EAAoBC,MAAaC,MAAM,CAC3CC,MAAOF,MAEJG,UAAU,4GACVC,SAAS,sEACZC,SAAUL,MAEPG,UAAU,4GACVC,SAAS,sEACZE,gBAAiBN,MAEdO,MAAM,CAACP,IAAQ,aAAc,4GAC7BI,SAAS,sEACVI,QAASR,MAERG,UAAU,8GAgBf,OAAIL,EAAMJ,OACD,kBAAC,IAAD,CAAUe,GAAI,eAIrB,yBAAKC,UAAWC,IAAEC,aAChB,yBAAKF,UAAWC,IAAEE,YAChB,kBAAC,IAAD,CACEC,cArBc,CACpBZ,MAAO,GACPG,SAAU,GACVU,WAAY,GACZT,gBAAiB,GACjBE,QAAQ,IAiBFQ,gBAAc,EACdC,SAfS,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACzCtB,EAAMD,MAAMqB,EAAOhB,MAAOgB,EAAOb,SAAUa,EAAOH,WAAWG,EAAOV,QAAQY,GAC5ED,GAAc,IAcRE,iBAAkBtB,IAEjB,gBAAGuB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,MAAOC,EAApC,EAAoCA,OAApC,OACC,kBAAC,IAAD,KACE,yBAAKhB,UAAWC,IAAEgB,MAChB,6BACE,2BAAOC,QAAO,SAAd,SACA,6BACA,kBAAC,IAAD,CACElB,UAAWC,IAAEkB,aACbC,KAAI,QACJC,KAAI,QACJC,YAAa,UAEdT,EAAQrB,OAASoB,EAAOpB,OACvB,yBAAKQ,UAAWC,IAAEsB,OAAQX,EAAOpB,QAIrC,6BACE,2BAAO0B,QAAO,YAAd,wCACA,6BACA,kBAAC,IAAD,CACElB,UAAWC,IAAEkB,aACbC,KAAI,WACJC,KAAI,WACJC,YAAa,aAEdT,EAAQlB,UAAYiB,EAAOjB,UAC1B,yBAAKK,UAAWC,IAAEsB,OAAQX,EAAOjB,WAGrC,6BACE,2BAAOuB,QAAO,mBAAd,+FACA,6BACA,kBAAC,IAAD,CACElB,UAAWC,IAAEkB,aACbC,KAAI,WACJC,KAAI,kBACJC,YAAW,iGAGdT,EAAQjB,iBAAmBgB,EAAOhB,iBACjC,yBAAKI,UAAWC,IAAEsB,OAAQX,EAAOhB,kBAIrC,yBAAKI,UAAWC,IAAEI,YAChB,kBAAC,IAAD,CACEL,UAAWC,IAAEuB,MACbJ,KAAI,WACJC,KAAI,eAEN,2BAAOrB,UAAWC,IAAEwB,WAAYP,QAAO,cAAvC,oFAKF,yBAAKlB,UAAWC,IAAEyB,cAAlB,IAAkCV,EAAlC,KACE,yBAAKhB,UAAWC,IAAEH,SACjBV,EAAMF,YAAc,yBAAKyC,IAAKvC,EAAMF,aACpCE,EAAMF,YACP,6BACE,2BAAOgC,QAAO,WAAd,uGACA,6BACA,kBAAC,IAAD,CACElB,UAAWC,IAAEkB,aACbC,KAAI,QACJC,KAAI,UACJC,YAAa,YAEdT,EAAQrB,OAASoB,EAAOpB,OACvB,yBAAKQ,UAAWC,IAAEsB,OAAQX,EAAOpB,SAIvC,6BACE,4BACEQ,UAAWC,IAAE2B,UACbC,UAAWf,IAAYC,EACvBK,KAAI,UAHN","file":"static/js/10.5eaa60a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWraper\":\"Login_loginWraper__1hUHG\",\"formStyles\":\"Login_formStyles__1mXlo\",\"inputLogForm\":\"Login_inputLogForm__20aJ3\",\"buttonLog\":\"Login_buttonLog__3Ha0g\",\"error\":\"Login_error__17Wu6\",\"checkLabel\":\"Login_checkLabel__2Go3x\",\"rememberMe\":\"Login_rememberMe__2b5Bc\",\"errorAPItext\":\"Login_errorAPItext__3Zg_c\"};","import React from \"react\";\nimport s from \"./Login.module.css\";\nimport { Field, Form, Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../redux/Auth-Reducer\";\nimport { Navigate } from \"react-router-dom\";\n\nconst Login = (props) => {\n\n  const validationsSchema = yup.object().shape({\n    email: yup\n      .string()\n      .typeError(\"должно быть строкой\")\n      .required(\"обязательно\"),\n    password: yup\n      .string()\n      .typeError(\"должно быть строкой\")\n      .required(\"обязательно\"),\n    confirmPassword: yup\n      .string()\n      .oneOf([yup.ref(\"password\")], \"пароли не совпадают\")\n      .required(\"Обязательно\"),\n      captcha: yup\n      .string()\n      .typeError(\"должно быть строкой\")\n      \n  });\n  const initialValues = {\n    email: \"\",\n    password: \"\",\n    rememberMe: \"\",\n    confirmPassword: \"\",\n    captcha:\"\"\n  };\n\n  const onSubmit = (values, { setSubmitting, setStatus }) => {\n    props.login(values.email, values.password, values.rememberMe,values.captcha,setStatus);\n    setSubmitting(false);\n  };\n\n  if (props.isAuth) {\n    return <Navigate to={\"/profile/*\"}/>\n  }\n  \n  return (\n    <div className={s.loginWraper}>\n      <div className={s.formStyles}>\n        <Formik\n          initialValues={initialValues}\n          validateOnBlur\n          onSubmit={onSubmit}\n          validationSchema={validationsSchema}\n        >\n          {({ errors, touched, isValid, dirty, status }) => (\n            <Form>\n              <div className={s.form}>\n                <div>\n                  <label htmlFor={`email`}>email</label>\n                  <br />\n                  <Field\n                    className={s.inputLogForm}\n                    type={`email`}\n                    name={`email`}\n                    placeholder={\"email\"}\n                  />\n                  {touched.email && errors.email && (\n                    <div className={s.error}>{errors.email}</div>\n                  )}\n                </div>\n\n                <div>\n                  <label htmlFor={`password`}>пароль</label>\n                  <br />\n                  <Field\n                    className={s.inputLogForm}\n                    type={`password`}\n                    name={`password`}\n                    placeholder={\"Password\"}\n                  />\n                  {touched.password && errors.password && (\n                    <div className={s.error}>{errors.password}</div>\n                  )}\n                </div>\n                <div>\n                  <label htmlFor={`confirmPassword`}>повторите пароль</label>\n                  <br />\n                  <Field\n                    className={s.inputLogForm}\n                    type={`password`}\n                    name={`confirmPassword`}\n                    placeholder={`повторите пароль`}\n                  />\n                </div>\n                {touched.confirmPassword && errors.confirmPassword && (\n                  <div className={s.error}>{errors.confirmPassword}</div>\n                )}\n              </div>\n\n              <div className={s.rememberMe}>\n                <Field\n                  className={s.check}\n                  type={`checkbox`}\n                  name={`rememberMe`}\n                />\n                <label className={s.checkLabel} htmlFor={`rememberMe`}>\n                  запомнить меня\n                </label>\n              </div>\n\n              <div className={s.errorAPItext}> {status} </div>\n                <div className={s.captcha}> \n                {props.CaptchaUrl && <img src={props.CaptchaUrl}/>}\n                {props.CaptchaUrl && \n                <div>\n                  <label htmlFor={`captcha`}>введи цифры и буквы</label>\n                  <br />\n                  <Field\n                    className={s.inputLogForm}\n                    type={`input`}\n                    name={`captcha`}\n                    placeholder={\"captcha\"}\n                  />\n                  {touched.email && errors.email && (\n                    <div className={s.error}>{errors.email}</div>\n                  )}\n                </div>}\n                </div>\n              <div>\n                <button\n                  className={s.buttonLog}\n                  disabled={!isValid && !dirty}\n                  type={`submit`}\n                >\n                  Отправить\n                </button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: state.Auth.isAuth,\n    CaptchaUrl:state.Auth.CaptchaUrl\n\n  }\n}\n\nexport default connect(mapStateToProps, { login })(Login);\n\n// import React from \"react\";\n// import s from \"./Login.module.css\";\n// import { Field, Form, Formik } from \"formik\";  - качаем библиотеку formik и используем ее инструменты \n// import * as yup from \"yup\"; - качаем библиотеку yup для валидаций \n// import { connect } from \"react-redux\"; - создаст нам контейнерную компоненту \n// import { login } from \"../../redux/Auth-Reducer\";\n// import { Navigate } from \"react-router-dom\";\n\n// const Login = (props) => { - ебал я рот классовую компаненту когда тут и функциональная подходит \n//   const validationsSchema = yup.object().shape({ - все валидации описываем в этой переменной в которой создаём обънет и погнали \n//     email: yup - описываем email\n//       .string() - это строка \n//       .typeError(\"должно быть строкой\") - говорим что должно быть строкой а не числом \n//       .required(\"обязательно\"), - заполнено обязательно \n//     password: yup\n//       .string()\n//       .typeError(\"должно быть строкой\")\n//       .required(\"обязательно\"),\n//     confirmPassword: yup\n//       .string()\n//       .oneOf([yup.ref(\"password\")], \"пароли не совпадают\") - .oneOf метод совпадения [yup.ref(\"password\")] ссылка на объект \n//       .required(\"Обязательно\"),\n//   });\n\n//   const initialValues = {  - инициализируемые значения \n//     email: \"\", \n//     password: \"\",\n//     rememberMe: \"\",\n//     confirmPassword: \"\",\n//   };\n\n//   const onSubmit = (values, { setSubmitting, setStatus }) => { - описываем функцию onSubmit. setSubmitting - булево.setStatus - метод который берёт статус запрашиваемого API\n//     props.login(values.email, values.password, values.rememberMe,setStatus); - прокидываем в санку все нужные значения \n//     setSubmitting(false); - закрываем setSubmitting принудительно и обязательно \n//   };\n\n//   if (props.isAuth) {\n//     return <Navigate to={\"/profile/*\"}/> - если инициализирован то ререндерит тебя на {\"/profile/*\"\n//   }\n  \n//   return (\n//     <div className={s.loginWraper}>\n//       <div className={s.formStyles}>\n//         <Formik   - оборачиваем все формы Formik ом\n//           initialValues={initialValues} и в параметры прокидываем всё чем он будет пользоваться \n//           validateOnBlur\n//           onSubmit={onSubmit}\n//           validationSchema={validationsSchema}\n//         >\n//           {({ errors, touched, isValid, dirty, status }) => ( - создаём ананимную стрелочную функцию и прокидываем в параметры все нужные нам свойства читать в  yup и formik документации\n//             <Form> - ну а теперь ещё вот этим оборачиваем если хотим использовать короткую запись и Field\n//               <div className={s.form}>\n//                 <div>\n//                   <label htmlFor={`email`}>email</label> - то что будет написано над формой или рядом \n//                   <br />\n//                   <Field - собственно сама форма \n//                     className={s.inputLogForm} - стили формы \n//                     type={`email`} - тип формы \n//                     name={`email`} - имя формы должно совпадать с значением initialValues\n//                     placeholder={\"email\"} - то что будет как бы подсказываеть что тебе написать в форме \n//                   />\n//                   {touched.email && errors.email && ( - если email в фокусе то ошибка email из typeError и выводим <div className={s.error}>{errors.email}</div>\n//                     <div className={s.error}>{errors.email}</div>\n//                   )}\n//                 </div>\n\n//                 <div>\n//                   <label htmlFor={`password`}>пароль</label>\n//                   <br />\n//                   <Field\n//                     className={s.inputLogForm}\n//                     type={`password`}\n//                     name={`password`}\n//                     placeholder={\"Password\"}\n//                   />\n//                   {touched.password && errors.password && (\n//                     <div className={s.error}>{errors.password}</div>\n//                   )}\n//                 </div>\n//                 <div>\n//                   <label htmlFor={`confirmPassword`}>повторите пароль</label>\n//                   <br />\n//                   <Field\n//                     className={s.inputLogForm}\n//                     type={`password`}\n//                     name={`confirmPassword`}\n//                     placeholder={`повторите пароль`}\n//                   />\n//                 </div>\n//                 {touched.confirmPassword && errors.confirmPassword && (\n//                   <div className={s.error}>{errors.confirmPassword}</div>\n//                 )}\n//               </div>\n\n//               <div className={s.rememberMe}>\n//                 <Field - тут уже создаём checkbox\n//                   className={s.check}\n//                   type={`checkbox`} - тут уже создаём checkbox\n//                   name={`rememberMe`}\n//                 />\n//                 <label className={s.checkLabel} htmlFor={`rememberMe`}> - ну тут всё ясно \n//                   запомнить меня\n//                 </label>\n//               </div>\n\n//               <div className={s.errorAPItext}> {status} </div> - а вот ёто мы отправляем в санку оно берёт там messanges и передаёт нам какая ошибка прилетает с сервака \n\n//               <div>\n//                 <button - кнопка отправить всё из форм \n//                   className={s.buttonLog}\n//                   disabled={!isValid && !dirty} - задисейблить если не завалидирован или если грязный как бомж -нужно глянуть что он имеет ввиду \n//                   type={`submit`} - тип отправить \n//                 >\n//                   Отправить\n//                 </button>\n//               </div>\n//             </Form>\n//           )}\n//         </Formik>\n//       </div>\n//     </div>\n//   );\n// };\n\n// const mapStateToProps = (state) => { - mapStateToProps соотведственно делаем потому что оборачиваем HOCом connect и прокидываем сюда санку и стейт \n//   return {\n//     isAuth: state.Auth.isAuth\n//   }\n// }\n\n// export default connect(mapStateToProps, { login })(Login);\n"],"sourceRoot":""}